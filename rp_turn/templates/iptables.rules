# Ruleset generated by Pexip RP
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]


# Create new chain named 'LOGGING' to log packets and finally direct these packets to the 'DROP' chain
-N LOGGING
-A LOGGING -m limit --limit 6/min -j LOG --log-prefix "pexiptables: " --log-level 4
-A LOGGING -j DROP


# Allow traffic for loopback
-A INPUT  -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT


# Disable outbound SSH
-A OUTPUT -p tcp -m tcp --dport 22 -j DROP


# Disable outbound ICMP timestamp
-A OUTPUT -p icmp -m icmp --icmp-type 14 -j DROP


{% if webloadbalance_enabled %}
# Allow HTTP/HTTPS traffic from any
-A INPUT -m conntrack --ctstate NEW -p tcp --dport 80 -j ACCEPT
-A INPUT -m conntrack --ctstate NEW -p tcp --dport 443 -j ACCEPT
# Allow HTTPS traffic to signaling nodes
{% for node in conferencenodes %}
-A OUTPUT -m conntrack --ctstate NEW -p tcp --destination {{node}} --dport 443 -j ACCEPT
{% endfor %}
{% endif %}


{% if turnserver_enabled %}
{% if client_turn %}
{% if turnserver_443 %}
# Client turn443 support
-A INPUT -m conntrack --ctstate NEW -p udp --dport 443 -j ACCEPT
-A INPUT -m conntrack --ctstate NEW -p tcp --dport 443 -j ACCEPT
{% else %}
# Allow both stun and turn requests from anywhere
-A INPUT -m conntrack --ctstate NEW -p udp --dport 3478 -j ACCEPT
-A INPUT -m conntrack --ctstate NEW -p tcp --dport 3478 -j ACCEPT

# Allow incoming and outgoing traffic anywhere on udp and tcp ports used for turn clients
{% endif %}
-A OUTPUT -m conntrack --ctstate NEW -p udp --sport 49152:65535 -j ACCEPT


{% else %}
# Allow TURN server access
{% if turnserver_443 %}
-A INPUT -m conntrack --ctstate NEW -p tcp --destination {{external_ip}} --dport 443 -j ACCEPT
{% for medianode in medianodes %}
-A OUTPUT -m conntrack --ctstate NEW -p udp --destination {{medianode}} --sport 49152:65535 --dport 10000:49999 -j ACCEPT
{% endfor %}
{% else %}
# Allow STUN requests from anywhere
-A INPUT -m conntrack --ctstate NEW -p udp --dport 3478 -m u32 --u32 "26&0xFFFF=0x0001" -j ACCEPT
# Allow TURN requests from whitelist
{% for medianode in medianodes %}
-A INPUT -m conntrack --ctstate NEW,ESTABLISHED,RELATED -p udp --source {{medianode}} --dport 3478 -j ACCEPT
{% endfor %}
# Block any other requests to 3478
-A INPUT -p udp --dport 3478 -j LOGGING
-A OUTPUT -m conntrack --ctstate NEW -p udp --source {{external_ip}} --sport 49152:65535 -j ACCEPT
{% endif %}
{% endif %}
{% endif %}


# Allow traffic for established connections
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT


# Drop all other traffic to infinity nodes
{% for node in allnodes %}
-A OUTPUT --destination {{node}} -j LOGGING
{% endfor %}



{% for network in management_networks %}
# Allow SSH access with the following rules
-A INPUT --source {{network}} --destination {{internal_ip}} -m conntrack --ctstate NEW -p tcp --dport 22 -j ACCEPT
{% if snmp_enabled %}
# Allow SNMPv2c read only access
-A INPUT  -p udp --source {{network}} --destination {{internal_ip}} --dport 161 -j ACCEPT
-A OUTPUT  -p udp --source {{internal_ip}} --destination {{network}} --dport 161 -j ACCEPT
{% endif %}
{% endfor %}


# Allow outbound web (for apt-get)
-A OUTPUT -m conntrack --ctstate NEW -p tcp --dport 80 -j ACCEPT
-A OUTPUT -m conntrack --ctstate NEW -p tcp --dport 443 -j ACCEPT
# Allow outbound DNS
-A OUTPUT -p udp --dport 53 -j ACCEPT
# Allow outbound NTP
-A OUTPUT -p udp --dport 123 -j ACCEPT


# Block all other incoming traffic
-A INPUT -j LOGGING

# Block all other outbound udp
-A OUTPUT -p udp -j LOGGING

# Block all other outbound tcp traffic on ports < 1024
-A OUTPUT -p tcp --dport 1:1023 -j LOGGING

COMMIT
