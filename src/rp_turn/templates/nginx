{% if verify_upstream_tls %}
# Loopback servers for TLS verify
  {%- for node in confnodes %}
server {
    listen unix:/run/nginx-upstream-{{node}}.sock;
    include snippets/proxy-defaults.conf;

    # Verify upstream TLS server certificate
    proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    proxy_ssl_verify_depth 5;
    proxy_ssl_verify on;

    location / {
        proxy_pass https://{{node}}:443;
    }
}
  {%- endfor %}
{% endif %}

# Upstream servers
upstream pexip {
    ip_hash;
  {%- for node in confnodes %}
    {% if verify_upstream_tls %}
    server unix:/run/nginx-upstream-{{node}}.sock weight=1 max_fails=0;
    {% else %}
    server {{node}}:443 weight=1 max_fails=0;
    {% endif %}
  {% endfor %}
    keepalive 1024;
}

# Redirect HTTP to HTTPS
server {
{% for address in addresses %}
    listen {{address}}:80 default_server;
{% endfor %}
    server_name {{fqdn}};
    return 301 https://$host$request_uri;
}

server {
{% for address in addresses %}
    listen {{address}}:443 ssl http2 default_server;
{% endfor %}
    server_name {{fqdn}};

    ssl_certificate ssl/pexip.pem;
    ssl_certificate_key ssl/pexip.pem;
    ssl_session_timeout 5m;

    ssl_protocols TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE. Dropping TLSv1. Dropping TLSv1.1
    ssl_ciphers !eNULL:!EXP:!DES:!3DES:!RC4:!RC2:!IDEA:!CAMELLIA:!SEED:!MD5:!aNULL:!ADH:!SRP:!PSK:EECDH+AESGCM:EDH+AESGCM;
    ssl_ecdh_curve secp384r1;
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    include snippets/proxy-defaults.conf;

{% for location in ["", "api", "static"] %}
    location /{{location}} {
        proxy_pass http://pexip;
  {% if location == "api" %}
        proxy_connect_timeout 20s;
  {% endif %}
  {% if location != "" %}
        access_log /var/log/nginx/{{location}}.access.log pexapplog;
        error_log /var/log/nginx/{{location}}.error.log;
  {% endif %}

        # Create separate error pages for each location so that the log message ends up in the right file.
        error_page 404 /{{location}}/404.html;
        error_page 500 502 503 504 /{{location}}/50x.html;
  {% for fail_location in ["404.html", "50x.html"] %}
        location /{{location}}/{{fail_location}} {
            internal;
            alias /var/www/{{fail_location}};
        }
  {% endfor %}
    }
{% endfor %}

{% for fail_location in ["/404.html", "/50x.html"] %}
    location {{fail_location}} {
        root /var/www;
    }
{% endfor %}
}

{% if enablecsp %}
# Adds Content Security-Policy into $csp variable if it is missing from conference node
map $upstream_http_content_security_policy $csp {
    '' "default-src 'self'; frame-src 'self' https://telemetryservice.firstpartyapps.oaspapps.com/telemetryservice/telemetryproxy.html https://*.microsoft.com https://*.office.com; style-src 'self' 'unsafe-inline' https://*.microsoft.com https://*.office.com; object-src 'self'; font-src 'self' https://*.microsoft.com https://*.office.com; img-src 'self' https://www.adobe.com data: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.microsoft.com https://*.office.com https://ajax.aspnetcdn.com https://api.keen.io; media-src 'self' blob:; connect-src 'self' https://*.microsoft.com https://*.office.com https://example.com;";
}
add_header Content-Security-Policy $csp;
{% endif %}
